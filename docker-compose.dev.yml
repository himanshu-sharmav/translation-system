version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - DATABASE_URL=postgresql+asyncpg://translation_user:translation_pass@postgres:5432/translation_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - USE_GPU=false
      - ENVIRONMENT=development
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
    depends_on:
      - postgres
      - redis
    command: uvicorn src.api.app:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - translation-network

  gpu-engine:
    build:
      context: .
      dockerfile: Dockerfile.gpu-engine
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql+asyncpg://translation_user:translation_pass@postgres:5432/translation_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - USE_GPU=true
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./src:/app/src
      - ./models:/app/models
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - translation-network

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: translation_db
      POSTGRES_USER: translation_user
      POSTGRES_PASSWORD: translation_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - translation-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - translation-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - translation-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - translation-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - gpu-engine
    networks:
      - translation-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  translation-network:
    driver: bridge